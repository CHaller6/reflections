When would you want to use a remote repository rather than keeping all your work
local?

    I would want to use a remote repository whenever I wanted to collaborite with other developers, or when I wanted to have my code hosted in the cloud (GitHub, in this case) so that I could work on the same project on different computers.



Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Manual pushing is preferred to automatic pushing because we may not always want to send our   commits to other repositories that we're sharing with others without first reviewing them and deciding whether they should go into a specified branch or not.



Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A fork only copies code from one user's GitHub repository to a new repository of the same name on your GitHub account--the action takes place entirely on GitHub. A clone makes a copy of a repository to your computer, and can be remote or local. When you work on a clone, you are essentially working on the original repository, and no credit is easily given to the original author and owner of the repository. Branches are generally done locally, and only make up a part of any given repository. 


What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a copy of the last known stateu of the remote stored locally allows you to see the activity of the entire remote while offline or otherwise not directly connected to the remote.



How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    The easiest solution would be to try to learn a different source control management system, such as Subversion or Mercurial. I could also collaborate with someone else by emailing copies of files, although this would be a *far* less efficient way to collaborate and would make merging copies of work done at the same time by different developers very difficult.



When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here



