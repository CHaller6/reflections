What happens when you initialize a repository? Why do you need to do it?

	When I initialize a repository, I create a .git folder with all of the resources
	Git will need to help track my files. I need to do it so that Git knows to setup 
	a repository in my directory, and so that it can begin to track files when committed.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The working directory is the actual directory where my files are stored. The staging 
	area is a representation of what I want the repository to look like after the commit.
	The staging area allows me to operate on anything that I am about to add to the repository 
	and lets me structure the commit before actually committing to the repository.

How can you use the staging area to make sure you have one commit per logical
change?

	You can use the staging area to ensure one commit per logical change by using it 
	to track all of the changes you have made, and to see what changes you have made against 
	the previous commit. If you find that some changes don't fit together into your logical 
	goal, then those changes can be removed from that commit and saved for a different commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Branches would be very helpful in keeping your history organized because they would help 	 separate out changes that didn't directly affect the master branch, so that you could see 	  what changes were made on each branch separately. In general, branches help keep the 		repository from becoming convoluted, and make it easier to jump between different 		experiments and the master branch quickly and easily.

How do the diagrams help you visualize the branch structure?

	The diagrams help me visualize the branch structure by allowing me to see where the 		branches break off from their parent branches. This makes it much easier to see where the 	  points of divergence and convergence are.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging two branhces together is that most of the changes made in the second 		branch are added to the changes made in the first branch since the branch began. The 		commits of the second branch are essentially "folded" into the first branch. It is 		represented in the diagram the way that it is to show that the commits were once part of a 		different branch that was folded into first.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

